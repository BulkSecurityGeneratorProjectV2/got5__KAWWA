apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'jetty'

sourceCompatibility = 1.6

version = '2.0.5-SNAPSHOT'

//ext.drivers = ["firefox", "chrome"]
ext.drivers = ["chrome",]

configurations {
    testCompile.transitive = true
}

dependencies {
 def gebVersion = "0.9.0"
 def seleniumVersion = "2.26.0"
 
 compile group: 'net.atos.tapestry', name: 'tapestry5-kawwa-components', version: '2.0.6'
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'
 compile group: 'com.google.api-client', name: 'google-api-client', version: '1.10.3-beta'
 compile group: 'javax.mail', name: 'mail', version: '1.4.3'
 compile group: 'xerces', name: 'xerces', version: '2.4.0'
 compile group: 'org.apache.tapestry', name: 'tapestry-core', version: '5.3.7'
 providedCompile  group: 'javax.servlet', name: 'servlet-api', version: '2.5'
 
 
 
 testCompile "org.gebish:geb-spock:$gebVersion"
 testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
 testCompile group: 'junit', name: 'junit', version: '4.10'
 
 // If using JUnit, need to depend on geb-junit (3 or 4)
 testCompile "org.gebish:geb-junit4:$gebVersion"

 // Drivers
 drivers.each { driver ->
     testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
 }

 testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        testReportDir = reporting.file("$name/tests")
        testResultsDir = file("$buildDir/test-results/$name")

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildï¿½
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

/*test {
	dependsOn drivers.collect { tasks["${it}Test"] }
	enabled = false
} */

repositories {
	mavenCentral()
	mavenLocal()
	maven {url 'http://nexus.devlab722.net/nexus/content/repositories/releases/'}
}

task deleteTapestryDocs(type: Delete) {
	delete 'src/main/webapp/apis/tapestry/'
}
task deleteAngularDocs(type: Delete) {
	delete 'src/main/webapp/apis/angular/'	
}
task compileTapestryLib(type: Exec)  {
    workingDir = file('../kawwa2-tapestry')
	commandLine 'cmd', '/c', 'mvn', 'site', '-o'
	standardOutput = new ByteArrayOutputStream()
    
}
task compileAngularLib(type: Exec)  {
	workingDir = file('../kawwa2-angularjs')
	commandLine 'cmd', '/c', 'grunt', 'doc'
    standardOutput = new ByteArrayOutputStream()
    ignoreExitValue = true
}
task copyTapestryDocs(type: Copy)  {
	from '../kawwa2-tapestry/target/site/apidocs'
	into 'src/main/webapp/apis/tapestry'
}
task copyAngularDocs(type: Copy) {
	from '../kawwa2-angularjs/docs'
	into 'src/main/webapp/apis/angular'
}

task generateSublimeTextSnippets(type: Exec) {
	workingDir = file('../kawwa2-sublimetext')
	commandLine 'cmd', '/c', 'node', 'script.js'
	standardOutput = new ByteArrayOutputStream()
}

task copyThemesForAngular(type: Copy) {
	from 'src/main/webapp/'
	
	include 'css/**', 'img/k-theme0/**', 'img/k-theme0/**', 'img/k-theme2/**'
	
	exclude 'css/i-theme*'
	
	into '../kawwa2-angularjs/app/theme'
	
	
	
}
task copyThemesForTapestry << {
	copy {
		from 'src/main/webapp/'
		include 'css/**', 'img/k-theme0/**', 'img/k-theme1/**', 'img/k-theme2/**'
		exclude 'css/i-theme*'
		into '../kawwa2-tapestry/src/main/resources/net/atos/kawwaportal/components/theme'
	}
	copy {
		from 'src/main/webapp/'
		include 'img/k-theme0/**', 'img/k-theme1/**', 'img/k-theme2/**'
		into '../kawwa2-tapestry/src/main/resources/net/atos/kawwaportal/components'
	}
	copy {
		from 'src/main/webapp/css/k-structure.css'
		into '../kawwa2-tapestry/src/main/resources/net/atos/kawwaportal/components/css'
	}
}


task zipComp(type: Zip) {
    from('/kawwa_components')
    baseName = 'Component'
    includeEmptyDirs = true
	version = ""
	destinationDir = file("/target")
}


copyTapestryDocs.dependsOn("compileTapestryLib", "deleteTapestryDocs")
copyAngularDocs.dependsOn("compileAngularLib", "deleteAngularDocs")

/*
processResources.dependsOn("copyTapestryDocs")
//processResources.dependsOn("copyAngularDocs")
processResources.dependsOn("generateSublimeTextSnippets")
processResources.dependsOn("copyThemesForAngular")
processResources.dependsOn("copyThemesForTapestry")
processResources.dependsOn("zipComp")
assemble.dependsOn("wrapper")
*/
task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}