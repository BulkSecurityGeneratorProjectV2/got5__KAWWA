<t:layout t:title="Index" xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd"  xmlns:p="tapestry:parameter">
<div id="main">

	<h2>How to contribute to this portal ?</h2>
	
	<h3>Introduction</h3>	
	<p>This portal rely on a file structure, directly stored in the server.
	You must have the rights to access to the machine and upload files</p>
	<br/>
	
	<h3>The file structure</h3>
	<p> The file structure is pretty simple, you can create groups and components easily by following a naming convention</p>
	<p>Each folder must have a properties file named "<strong>metadata.properties</strong>". The different keys you have to mention are :</p>
	<ul>
		<li><strong>name :</strong> It will be the name of the component, spaces are allowed</li>
		<li><strong>type :</strong> It can be <em>group</em> or <em>component</em></li>
		<li><strong>urlParam :</strong> Because the portal uses friendly URLs, this key is the part of the url which targets directly your component. Spaces are forbidden</li>
		<li><strong>tags : </strong> It is a comma-separated list of tags. The possible values are <em>jQuery</em>, <em>html5</em> and <em>tapestry</em>. We'll explain it later</li>
		<li><strong>css : </strong> You can insert this key if you want to give the main css class for the component</li>
	</ul>
	<p>If you gave a <em>group</em> type, it will just be a folder of several subComponents and the others keys are not mandatory. In the other case, if you gave a <em>component</em> type, you have to valorize the others keys and respect a file structure inside this folder.</p>
	
	<p>
		<img src="${asset:context:img/contribute/fileStructure.png}" alt="file structure for a component" style="border: 1px solid #666"/>
	</p>
	
	<p>Here is the complete list of files and folders:</p>
	<ul>
		<li>
			<strong>dependencies</strong>
			<em>(folder)</em> :
			you can paste in this repositories all the javascript dependencies of your component. They will be listed in the component page.
		</li>
		<li>
			<strong>resources</strong>
			<em>(folder)</em> :
			if your components uses specific images for example, you can paste them in this folder. You could access them with a relative path in the <em>src</em> attributes of your HTML.
		</li>
		<li>
			<strong>documentation</strong>
			<em>(folder)</em> :
			if your components needs a specific documentation, you can paste your documents in this folder. We'll explain how to write documentation later.
		</li>
		<li>
			<strong>snippet.html</strong>
			<em>(file)</em> :
			contains the XHTML snippet of the component.
		</li>
		<li>
			<strong>snippet.js</strong>
			<em>(file)</em> :
			contains the Javascript snippet of the component.
		</li>
		<li>
			<strong>snippet.html5</strong>
			<em>(file)</em> :
			contains the HTML5 snippet of the component, only if your component has a HTML 5 version.
		</li>
		<li>
			<strong>forewords.html</strong>
			<em>(file)</em> :
			contains the description of the component you want to see above the snippets.
		</li>
		<li>
			<strong>afterwords.html</strong>
			<em>(file)</em> :
			contains the description of the component you want to see under the snippets.
		</li>
		<li>
			<strong>readmore.html</strong>
			<em>(file)</em> :
			contains additional information for the HTML snippet
		</li>
		<li>
			<strong>readmore.html5</strong>
			<em>(file)</em> :
			contains additional information for the HTML 5 snippet
		</li>
		<li>
			<strong>readmore.css</strong>
			<em>(file)</em> :
			contains additional information for the CSS snippet
		</li>
		<li>
			<strong>readmore.css5</strong>
			<em>(file)</em> :
			contains additional information for the CSS snippet, in the HTML 5 version only
		</li>
		<li>
			<strong>readmore.js</strong>
			<em>(file)</em> :
			contains additional information for the Javascript snippet
		</li>
		
		
	</ul>
	
	<br/>
	<h3>How to write documentation ?</h3>
	<p>If you look at the root of the file structure, you will find a <em>documentation</em> folder. You can dump your documentation files(.docx, .pdf, .txt, images, etc...) in this folder.</p>
	<p>If you look inside the <em>documentation</em> folder of your component, you will find a file named <em>info.properties</em>.</p>
	<p>Inside this file, you can provide new keys like that : <em>nameOfTheDocumentationFile : precision about this file</em>.</p>
	<p>Example : <strong>doc_1.text = read chapter 4</strong></p>
	<p>The processing of the file works like thats</p>
	<ul>
		<li>the portal will look after the <em>doc_1.text</em> file inside the <em>documentation</em> folder of your component.</li>
		<li>If the file is not found, the portal will look after the <em>doc_1.text</em> file inside the <em>documentation</em> folder of your component, but one level under, in a subfolder which has the name of your browser's locale.</li>
		<li>If the file is not found, the portal will look after the <em>doc_1.text</em> file inside the <em>documentation</em> folder, in the root of the file structure</li>
		<li>If the file is not found, the portal will look after the <em>doc_1.text</em> file inside the <em>documentation</em> folder, in the root of the file structure, but one level under, in a subfolder which has the name of your browser's locale.</li>
		<li>If the file is not found, it is ignored.</li>
	</ul>
	
	
	
	<br/>
	<h3>How to provide CSS to our component ?</h3>
	<p>Do you remember the <em>urlParam</em> key in your metadata.properties ? You just have to use it in your <em>k-themeXXX.css</em> file !</p>
	<p>
		<img src="${asset:context:img/contribute/cssBalises.png}" alt="css syntax for the snippets" style="border: 1px solid #666"/>
	</p>
	<p>This example indicates that this part of the file is the CSS snippet for the subFieldsets component.</p>
	<p>You begin the snippet with <em>/* CB/ urlParam */</em> and you finish it with <em>/* CE/ urlParam */</em></p>
	
	<br/>
	<h3>How to target a image of the theme directly with the HTML</h3>
	<p>Instead of providing a relative path in the <em>src</em> attributes of your HTML, you can use the 'magic' folder [[THEME_IMG]]. In this case, the image will be loaded from your theme</p>
	<p>Example : 	<strong>&lt;img src="[[THEME_IMG]]/pic_help.png" alt="[ Help ]" /&gt;</strong></p> 
	
	<br/>
	<h3>What are the tags utilities ?</h3>
	<h4>the <em>jQuery</em> Tag</h4>
	<p>Provide this tag if your components uses jQuery. A dependency to jQuery will automatically appear. The jQuery logo will be displayed next to your component name.</p>
	<h4>the <em>html5</em> Tag</h4>
	<p>Provide this tag if your components has a HTML5 version. The snippets will be organized in tabs and a tab will be dedicated to this version.</p>
	<h4>the <em>tapestry</em> Tag</h4>
	<p>Provide this tag if your components has a Tapestry version. The snippets will be organized in tabs and a tab will be dedicated to this version.</p>
	
	<br/>
	<h3>How can I reload the whole file structure after an update ?</h3>
	<p>There is a specific URL : <t:pagelink t:page="reset">click here</t:pagelink></p>
</div>
</t:layout>


	
