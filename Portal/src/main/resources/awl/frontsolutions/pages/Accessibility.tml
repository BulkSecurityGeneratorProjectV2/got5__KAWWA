<t:layout t:activeMenu="4" t:title="All About Kawwa: Kawwa and Accessibility" t:breadcrumb="Kawwa and Accessibility" xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd" xmlns:p="tapestry:parameter">

<t:AboutKawwaMenu />

<div id="main">
	<div class="k-article">
		<h2>Kawwa and Accessibility</h2>
				
				<div class="k-intro">
					<p>The Kawwa Components were created having in mind the main accessibility issues a 
						web site may present.</p>
					<p>From the choice of respecting the web standards to the way our components were created, we've 
tried our best to introduce the highest level of the W3C/WAI (Web Accessibility Initiative) 
accessibility recommendations to the future teams that will use Kawwa to develop their sites.</p>
    			</div>
					
				<div class="k-notes">
					<p>Please notice that Kawwa just introduces and proposes 
					the accessibility recommendations, and that that alone cannot assure the level of accessibility of the  
					developed site. That doesn't mean either that the Kawwa components 
					are covering all of the accessibility requirements. 
					<strong>Only the full commitment of the development team to provide a 
										real accessible web site can assure success</strong>. </p>
				</div>
								
					<p>Our main concern during the choice and assembling of Kawwa Components was to give "hints" to the development team 
					in order to assure the full availability of the content in spite of the physical or material constraints 
					that some users may present to access content and to use the web site.</p>
					 
					<p>As the components provide only a starting point for development, we cannot talk neither about a determined 
					level of accessibility as classified by the W3C/WAI. Nonetheless, we did our best to introduce most 
					of the level AAA requirements where possible.</p>
					
					<p class="k-readmore">Please refer to the <a href="http://www.w3.org/WAI/" class="k-new-window" title="Opens in a new window/tab">W3C/WAI</a> site 
					for more information</p>
					
				<h3>Introduced Accessibility requirements</h3>
				
				<h4>Providing text alternatives</h4>
				
				<p>In order to provide the user with full access to the content, we have to be aware of all non-textual content. 
Non-textual content must present a text alternative with an equivalent value, so the user won't 
loose information if she cannot access the non-textual content in a proper way. 
For the Kawwa components, we followed some simple rules to respond to that:</p>

				<ul>
					<li>Each and every image has an alternative given by the alt attribute; </li>
					<li>The alternative gives the meaning of the image, as in the pagination component: </li>
				</ul>
				
				<div class="i-code">
                	<dl>
                		<dt>HTML</dt>
                		<dd>&lt;a href=&quot;#&quot; title=&quot;Go to next page&quot;&gt;<br />
                			&lt;img src=&quot;../img/k-theme1/pic_next.gif&quot; alt=&quot;<strong class="stressed">[ Next page ]</strong>&quot; /&gt;&lt;/a&gt;</dd>
                	</dl>
                </div>
                
                <ul>
                	<li>If the image is purely decorative, we prefer to include it via the style-sheet as a 
background image. When that's not possible, we provide an empty alt attribute 
(alt=""), so it can be ignored by assistive technology, like screen readers. </li>
					<li>Each and every non-decorative image, when it is a link, has an explanation given by the 
title attribute. The value of this attribute extends the alternative by explaining the 
image function or context. In the example below, the alt attribute tells what the 
image is, while the title attribute tells what the image does: </li>
                </ul>
                
                
				<div class="i-code">
                	<dl>
                		<dt>HTML</dt>
                		<dd>&lt;a href=&quot;#&quot; title=&quot;<strong class="stressed">Go to next page</strong>&quot;&gt;<br />
                			&lt;img src=&quot;../img/k-theme1/pic_next.gif&quot; alt=&quot;<strong class="stressed">[ Next page ]</strong>&quot; /&gt;&lt;/a&gt;</dd>
                	</dl>
                </div>
                
                <p>This last rule helps also users that use your application in a conventional way: he sees the arrow 
pointing left (he doesn't need the textual alternative), but passing his cursor over the arrow link, he 
sees a tooltip that explains him what the arrow does ("Go to first page").</p>

			<h4>Providing adaptable content</h4>
			
			<p>As stated by the W3C/WAI guidelines, we have to "<strong>create content that can be presented in different 
			ways (for example simpler layout) without loosing information or structure</strong>". In this sense, KAWWA templates were created:</p>
			
			<ul>
				<li>respecting strictly the <strong>web standards</strong>, including the complete separation of content 
from presentation, and the use of <strong>semantic elements</strong> to mark up structure;</li>
				<li>by carefully structuring the content to be portable and evolving, using the appropriate 
markup to each kind of content; </li>
				<li>preferring to use textual information instead of images, whenever possible;</li> 
				<li>using table markup exclusively to present tabular data;</li>
				<li>introducing the techniques to create accessible tabular data:
					<ul>
						<li>through the "summary" attribute to allow  to present to users a overview of table data;</li> 
						<li>through the use of the appropriate markup to associate data cells with their related header cells.</li>
					</ul>
				</li>
				<li>introducing the techniques to create accessible forms :
					<ul>
						<li>through the use of "fieldsets" to group form fields of the same nature in order to 
create a form structure that will help users to interact with more effectively; </li>
						<li>through the use of form labels that associate text labels with their fields; </li>
						<li>through the option of using the <span class="i-code">&lt;legend&gt;</span> tag to provide a label for a group of form fields.</li>
					</ul>
				</li>
				<li>introducing javascript functions from the DOM (Document Object Model)</li>
			</ul>
			
			<p>The choices listed here above allow the code to be well structured, coherent and robust, 
helping to achieve what we call "an elegant degradation" of the content. In the case we 
don't have the layout anymore (because the style-sheet is not available), if the content is well structured and logic, the content of the page will still be readable. 
That means that the page will be fully accessible by old or text-only browsers and it will greatly improve the access by assistive technologies like screen readers.</p>
            
            <h4>Providing distinguishable content</h4>
            
            <p>In order to the content to be accessible, it must also be easily distinguishable and easy to read.   
For example, a white text over a light yellow background makes a text practically unreadable, and 
that's even more important to users that have more than 40 years old, when the perception of color 
contrast begins to decrease.</p> 
			<p>The Kawwa components provide the following techniques to present distinguishable content to the users:</p>
			
			<ul>
				<li>Color is not the only way of conveying information</li>
				<li>The size of the text is always defined in relative values, so text can be zoomed;</li> 
 				<li>The page structure and all Kawwa components are constructed to have what is usually called a "liquid" lay-out. The 
liquid lay-out allows the content to be accommodated horizontally on a page no matter 
the browser's window size or screen-resolution.</li>
			</ul>
			
			<h4>Providing keyboard access</h4>
			
			<p>Providing keyboard access is an important requirement that allows users not to be completely "mouse-dependent". 
				This is especially important for client-side scripts that usually rely too much on mouse events.</p> 
			<p>Kawwa introduces keyboard access to all Kawwa Components.</p>
           	
           	<h4>Providing help to site navigation</h4>
           	
           	<p>Besides the keyboard navigation, the Kawwa components introduce ways to help users navigate, find content and determine where they are:</p> 
 
 			<ul>
 				<li>by providing a breadcrumb trail;</li> 
				<li>by providing a link to the home page in all pages;</li>
 				<li>by limiting the number of links per page: as suggested by the accessibility recommendations, the 
number of main sections should not be more than 8, but you must be also aware of the 
number of links present in the page body;</li>
				<li>by allowing the user to bypass the page navigation: this technique is specially useful for 
screen readers users (or users that navigate using the keyboard) that, each time they change pages, instead of "listening" (or "tabbing") to all sections 
and navigation items they can simply jump directly to the main content area. This is done by adding a "hidden" link that will be read by screen readers just before 
navigation menus:</li>
 			</ul>
 			
 			<div class="i-code">
                	<dl>
                		<dt>HTML</dt>
                		<dd>&lt;p id=&quot;skipmenu&quot;&gt;&lt;a href=&quot;#main&quot;&gt;Skip this menu&lt;/a&gt;&lt;/p&gt;</dd>
                	</dl>
                </div>	
             
	   	  </div>
			
		</div>

				

		<div id="sidebar">

			<ul class="k-actions">

				<li><a href="#" class="bt-print" title="Print this article">Print</a></li>

				<!-- <li><a href="#" class="bt-email" title="Send this article by e-mail">Email</a></li>-->

			</ul>

			<t:themeswitcher/>

			<div t:type="checkOutAlso" />

		</div>



</t:layout>
