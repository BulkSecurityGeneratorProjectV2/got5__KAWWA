<t:layout t:activeMenu="4" t:title="All About Kawwa: The Kawwa Portal" xmlns:t="http://tapestry.apache.org/schema/tapestry_5_3.xsd" xmlns:p="tapestry:parameter">
	
<t:AboutKawwaMenu />
		
<div id="main">
	<div class="k-article">
		<h2>Unobtrusive Javascript Approach</h2>
				
		<div class="k-intro">
			<p>The HTML is about content, the CSS design is about style and the javascript is about behavior and interaction. They work together, but 
						they must not mix with the other, as each one of them must keep their meaning once by themselves.</p>
			<p>The unobtrusive javascript allows you to keep this approach, isolating what's about behavior and interaction from content or style.</p>
    	</div>
    			
		<p>When consulting the web, what is really important to the user is to have access to the desired content and to be able to interact with it if she may (in the 
			case of forms, for example). The illustration below shows how content is always available to the user if the separation between content, style and behavior 
			are respected:</p>
                	
        <div class="k-illustration-block">
			<p class="illustration"><img src="${asset:context:img/unobtrusive1.png}" alt="" /></p>
		</div>
				
		<p>Users that, for one reason or the other, can't load the style-sheet will still be able to consult the content of the page, and even 
			to interact with it if needed. At the same time, if she's able to load the style-sheet but cannot load the javascript, she must still be 
			able to access the totality of the content. </p>
					
		<div class="k-notes">
			<p>Notice that this approach does not replaces the alternatives to javascript.</p>
		</div>
							
		<p>But how can we separate the behavior from the content?</p>
		<p>There are four simple rules that we should respect in order to "practice" the unobtrusive javascript approach:</p>
				
		<ol>
			<li>never add event handlers to your HTML pages</li>
			<li>never add function definitions to your HTML pages</li>
			<li>create a javascript file with generic function definitions and load it on your pages with the <span class="i-code">&lt;script&gt;</span> tag</li>
			<li>create a javascript file that will load all needed functions on page load</li>
		</ol>
				
		<p>This is the approach you must use when dealing with Kawwa Components.</p>
	</div>
</div>

<div id="sidebar">
	<ul class="k-actions">
		<li><a href="#" class="bt-print" title="Print this article">Print</a></li>
		<!-- <li><a href="#" class="bt-email" title="Send this article by e-mail">Email</a></li>-->
	</ul>
	
	<t:themeswitcher />

	<t:CheckOutAlso />		

</div>
</t:layout>